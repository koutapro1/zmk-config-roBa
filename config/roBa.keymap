#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        single_quotation {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <20 19>;
        };

        semi_colon {
            bindings = <&kp SEMICOLON>;
            key-positions = <20 21>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <8 9>;
        };

        toggle_colemak {
            bindings = <&tog 6>;
            key-positions = <27 28>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tap_BS_hold_shift: tap_BS_hold_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_BS_HOLD_SHIFT";
            #binding-cells = <0>;
            bindings = <&mt LEFT_SHIFT BACKSPACE>, <&kp BACKSPACE>;

            tapping-term-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W           &kp E               &kp R                   &kp T                                           &kp Y                  &kp U              &lt 5 I              &kp O            &kp P
&mt LEFT_CONTROL A  &mt LEFT_ALT S  &mt LEFT_COMMAND D  &mt LEFT_SHIFT F        &kp G        &kp EQUAL        &kp SINGLE_QUOTE  &kp H                  &mt RIGHT_SHIFT J  &mt RIGHT_COMMAND K  &mt RIGHT_ALT L  &mt RIGHT_CONTROL MINUS
&kp Z               &kp X           &kp C               &kp V                   &kp B        &kp TILDE        &kp SEMICOLON     &kp N                  &kp M              &kp COMMA            &kp DOT          &kp SLASH
&kp LCTRL           &kp LEFT_WIN    &kp LEFT_ALT        &mt LEFT_COMMAND LANG2  &lt 5 SPACE  &lt 5 LANG1      &lt 2 ENTER       &mt RIGHT_SHIFT LANG1                                                           &kp BACKSLASH
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp KP_NUMBER_6             &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0                                        &kp CARET         &kp AMPERSAND      &kp ASTRK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp KP_NUMBER_1             &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp LS(EQUAL)      &kp LS(SQT)        &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp COLON        &kp SLASH        &kp MINUS        &kp PIPE           &kp LS(SEMICOLON)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp GRAVE
&trans                      &trans           &trans           &trans           &trans           &trans             &trans             &trans                                                                     &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&kp NUMBER_1        &kp NUMBER_2              &kp NUMBER_3               &kp NUMBER_4         &kp NUMBER_5                      &kp NUMBER_6           &kp NUMBER_7        &kp NUMBER_8        &kp NUMBER_9      &kp NUMBER_0
&kp LC(LEFT_ARROW)  &kp LG(LS(LEFT_BRACKET))  &kp LS(LG(RIGHT_BRACKET))  &kp LC(RIGHT_ARROW)  &trans        &trans      &trans  &kp BACKSPACE          &kp LEFT_ARROW      &kp DOWN_ARROW      &kp UP_ARROW      &kp RIGHT_ARROW
&kp LG(LEFT_ARROW)  &kp LG(RIGHT)             &kp LC(DOWN_ARROW)         &kp LC(UP_ARROW)     &trans        &trans      &trans  &kp DELETE             &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)
&trans              &trans                    &trans                     &trans               &trans        &trans      &trans  &mt LEFT_SHIFT DELETE                                                            &trans
            >;
        };

        colemak {
            bindings = <
&kp Q             &kp W             &kp F         &kp P                       &kp G                                    &kp J               &kp L  &lt 5 U    &kp Y       &kp SEMICOLON
&kp A             &kp R             &kp S         &kp T                       &kp D        &kp EQUAL      &kp SQT      &kp H               &kp N  &kp E      &kp I       &kp O
&kp Z             &kp X             &kp C         &kp V                       &kp B        &kp TILDE      &kp MINUS    &kp K               &kp M  &kp COMMA  &kp PERIOD  &kp SLASH
&kp LEFT_CONTROL  &kp LEFT_COMMAND  &kp LEFT_ALT  &mt LEFT_COMMAND LC(SPACE)  &lt 5 SPACE  &lt 2 TAB      &lt 2 ENTER  &tap_BS_hold_shift                                &kp BACKSLASH
            >;
        };
    };
};
